import { NextResponse } from "next/server";
import { auth } from "@/lib/auth";
import { GoogleGenAI } from "@google/genai";

// Marcar como rota din√¢mica
export const dynamic = 'force-dynamic';

const API_KEY = process.env.GEMINI_API_KEY;

interface Message {
  role: "user" | "assistant";
  content: string;
}

/**
 * POST /api/chat
 * Chat com Lumina sobre livros e recomenda√ß√µes
 */
export async function POST(request: Request) {
  try {
    const session = await auth();

    if (!session?.user?.email) {
      return NextResponse.json(
        { error: "N√£o autenticado" },
        { status: 401 }
      );
    }

    const body = await request.json();
    const { message, history = [] } = body;

    if (!message || typeof message !== "string") {
      return NextResponse.json(
        { error: "Mensagem √© obrigat√≥ria" },
        { status: 400 }
      );
    }

    if (!API_KEY) {
      return NextResponse.json(
        { error: "API Key do Gemini n√£o configurada" },
        { status: 500 }
      );
    }

    // Construir o contexto do chat
    const systemPrompt = `Voc√™ √© Lumina, uma assistente virtual especializada em literatura e livros. Suas caracter√≠sticas:

üåü **Personalidade:**
- Amig√°vel, entusiasmada e apaixonada por livros
- Usa emojis relevantes (üìö, ‚ú®, üí´, üé≠, üåô, etc)
- Escreve de forma conversacional e acess√≠vel
- Faz perguntas para entender melhor o gosto do usu√°rio

üìö **Especialidades:**
- Recomenda√ß√µes personalizadas de livros
- Discuss√µes sobre enredos, personagens e temas
- Sugest√µes baseadas em mood/vibe
- Informa√ß√µes sobre autores e g√™neros liter√°rios
- Ajuda a encontrar o pr√≥ximo livro perfeito

üí° **Como voc√™ funciona:**
- Pergunta sobre prefer√™ncias, mood, momento de vida
- Sugere livros com base em caracter√≠sticas emocionais
- Explica porque um livro pode agradar o usu√°rio
- Compara livros e autores quando relevante
- Mant√©m o foco em literatura e leitura

‚ö†Ô∏è **Importante:**
- Seja concisa mas completa (m√°ximo 3-4 par√°grafos por resposta)
- Se n√£o souber algo, seja honesta
- Evite spoilers sem avisar
- Pergunte se o usu√°rio quer mais detalhes sobre algo

üìñ **Formata√ß√£o de T√≠tulos de Livros:**
MUITO IMPORTANTE: Quando mencionar t√≠tulos de livros, SEMPRE siga este formato EXATO:
"T√≠tulo Completo do Livro" - Nome do Autor

Exemplos CORRETOS:
‚úÖ "O Pequeno Pr√≠ncipe" - Antoine de Saint-Exup√©ry
‚úÖ "1984" - George Orwell
‚úÖ "Harry Potter e a Pedra Filosofal" - J.K. Rowling
‚úÖ "O Senhor dos An√©is" - J.R.R. Tolkien
‚úÖ "Dom Casmurro" - Machado de Assis

NUNCA fa√ßa assim:
‚ùå O Pequeno Pr√≠ncipe (sem aspas)
‚ùå "O Pequeno Pr√≠ncipe" de Antoine... (use h√≠fen -)
‚ùå O livro "1984" (mencione autor)

Isso permite que os usu√°rios cliquem nos t√≠tulos para ver detalhes exatos!

Responda em portugu√™s brasileiro de forma natural e envolvente.`;

    // Inicializar Gemini AI (conforme documenta√ß√£o oficial)
    const ai = new GoogleGenAI({ apiKey: API_KEY });

    // Construir o conte√∫do completo para enviar
    let fullPrompt = "";
    
    // Adicionar system prompt como contexto
    if (history.length === 0) {
      fullPrompt = systemPrompt + "\n\n";
    }
    
    // Adicionar hist√≥rico de mensagens
    history.forEach((msg: Message) => {
      if (msg.role === "user") {
        fullPrompt += `Usu√°rio: ${msg.content}\n`;
      } else {
        fullPrompt += `Lumina: ${msg.content}\n`;
      }
    });

    // Adicionar mensagem atual
    fullPrompt += `Usu√°rio: ${message}\nLumina:`;

    // Fazer request para Gemini usando o padr√£o oficial
    const response = await ai.models.generateContent({
      model: "gemini-2.5-flash",
      contents: [{ text: fullPrompt }],
    });

    const aiResponse = response.text || "Desculpe, n√£o consegui gerar uma resposta. Pode tentar novamente?";

    return NextResponse.json({
      success: true,
      response: aiResponse,
    });
  } catch (error) {
    console.error("Error in chat API:", error);
    return NextResponse.json(
      { error: "Erro ao processar mensagem" },
      { status: 500 }
    );
  }
}
